--
--	@(#) dbcreate/cfint/mysql/crsp_delete_tenant.mysql
--
--	org.msscf.msscf.CFInt
--
--	Copyright (c) 2020 Mark Stephen Sobkow
--	
--	This file is part of MSS Code Factory.
--	
--	Licensed under the Apache License, Version 2.0 (the "License");
--	you may not use this file except in compliance with the License.
--	You may obtain a copy of the License at
--	
--	    http://www.apache.org/licenses/LICENSE-2.0
--	
--	Unless required by applicable law or agreed to in writing, software
--	distributed under the License is distributed on an "AS IS" BASIS,
--	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--	See the License for the specific language governing permissions and
--	limitations under the License.
--	
--	Donations to support MSS Code Factory can be made at
--	https://www.paypal.com/paypalme2/MarkSobkow
--
--	Manufactured by MSS Code Factory 2.12
--
delimiter ////
create procedure cfinet213.sp_delete_tenant(
	argAuditClusterId bigint,
	argAuditUserId varchar(36),
	argAuditSessionId varchar(36),
	secClusterId bigint,
	secTenantId bigint,
	argId bigint,
	argRevision int )
not deterministic
modifies sql data
begin
	declare RowsAffected bigint;
	declare oldClusterId bigint;
	declare oldId bigint;
	declare oldTenantName varchar(192);
	declare oldRevision int;
	declare permissionFlag boolean;
	declare isSystemUser boolean;
	declare done int default false;
	declare deltldsTenantId bigint;
	declare deltldsId bigint;
	declare delincludedbygroupTenantId bigint;
	declare delincludedbygroupTSecGrpIncId bigint;
	declare delgrpmembsTenantId bigint;
	declare delgrpmembsTSecGrpMembId bigint;
	declare delgrpincsTenantId bigint;
	declare delgrpincsTSecGrpIncId bigint;
	declare deltsecgroupsTenantId bigint;
	declare deltsecgroupsTSecGroupId integer;
	declare cur_deltlds cursor for
		select
			a106.tenantid,
			a106.id
		from cfinet213.tenant as a015
			inner join cfinet213.tlddef a106 on
				a015.id = a106.tenantid
		where
			a015.id = argId;
	declare cur_delincludedbygroup cursor for
		select
			a017.tenantid,
			a017.tsecgrpincid
		from cfinet213.tenant as a015
			inner join cfinet213.TSecGrp a016 on
				a015.id = a016.tenantid
			inner join cfinet213.TSecInc a017 on
				a016.tenantid = a017.tenantid
				and a016.tsecgroupid = a017.incgrpid
		where
			a015.id = argId;
	declare cur_delgrpmembs cursor for
		select
			a018.tenantid,
			a018.tsecgrpmembid
		from cfinet213.tenant as a015
			inner join cfinet213.TSecGrp a016 on
				a015.id = a016.tenantid
			inner join cfinet213.TSecMemb a018 on
				a016.tenantid = a018.tenantid
				and a016.tsecgroupid = a018.tsecgroupid
		where
			a015.id = argId;
	declare cur_delgrpincs cursor for
		select
			a017.tenantid,
			a017.tsecgrpincid
		from cfinet213.tenant as a015
			inner join cfinet213.TSecGrp a016 on
				a015.id = a016.tenantid
			inner join cfinet213.TSecInc a017 on
				a016.tenantid = a017.tenantid
				and a016.tsecgroupid = a017.tsecgrpid
		where
			a015.id = argId;
	declare cur_deltsecgroups cursor for
		select
			a016.tenantid,
			a016.tsecgroupid
		from cfinet213.tenant as a015
			inner join cfinet213.TSecGrp a016 on
				a015.id = a016.tenantid
		where
			a015.id = argId;
	declare continue handler for not found set done = true;
	select
			ClusterId,
		Id,
		TenantName,
			revision
	into
		oldClusterId,
			oldId,
			oldTenantName,
		oldRevision
	from cfinet213.tenant
	where
		Id = argId
	for update;
	select cfinet213.sp_is_system_user( argAuditUserId ) into permissionFlag;

	if( permissionFlag = false )
	then
		signal sqlstate '45001'
		set message_text = 'sp_delete_tenant() Permission denied, not identified as system',
			schema_name = 'cfinet213',
			table_name = 'tenant';
	end if;

	insert into cfinet213.tenant_h (
			id,
			auditclusterid,
			auditsessionid,
			auditstamp,
			clusterid,
			tenantname,
			revision,
			auditaction )
		select
			a015.id,
			argAuditClusterId,
			argAuditSessionId,
			now(),
			a015.clusterid,
			a015.tenantname,
			a015.revision + 1,
			3
		from cfinet213.tenant as a015
		where
			a015.id = argId;

	set done = false;
	open cur_deltlds;
	read_loop_deltlds: loop
		fetch cur_deltlds into
			deltldsTenantId,
			deltldsId;
		if done then
			leave read_loop_deltlds;
		end if;
		call cfinet213.sp_delete_tlddef_by_ididx( argAuditClusterId,
			argAuditUserId,
			argAuditSessionId,
			secClusterId,
			secTenantId,
			deltldsTenantId,
			deltldsId );
	end loop;
	close cur_deltlds;
	set done = false;
	open cur_delincludedbygroup;
	read_loop_delincludedbygroup: loop
		fetch cur_delincludedbygroup into
			delincludedbygroupTenantId,
			delincludedbygroupTSecGrpIncId;
		if done then
			leave read_loop_delincludedbygroup;
		end if;
		call cfinet213.sp_delete_tsecinc_by_ididx( argAuditClusterId,
			argAuditUserId,
			argAuditSessionId,
			secClusterId,
			secTenantId,
			delincludedbygroupTenantId,
			delincludedbygroupTSecGrpIncId );
	end loop;
	close cur_delincludedbygroup;
	set done = false;
	open cur_delgrpmembs;
	read_loop_delgrpmembs: loop
		fetch cur_delgrpmembs into
			delgrpmembsTenantId,
			delgrpmembsTSecGrpMembId;
		if done then
			leave read_loop_delgrpmembs;
		end if;
		call cfinet213.sp_delete_tsecmemb_by_ididx( argAuditClusterId,
			argAuditUserId,
			argAuditSessionId,
			secClusterId,
			secTenantId,
			delgrpmembsTenantId,
			delgrpmembsTSecGrpMembId );
	end loop;
	close cur_delgrpmembs;
	set done = false;
	open cur_delgrpincs;
	read_loop_delgrpincs: loop
		fetch cur_delgrpincs into
			delgrpincsTenantId,
			delgrpincsTSecGrpIncId;
		if done then
			leave read_loop_delgrpincs;
		end if;
		call cfinet213.sp_delete_tsecinc_by_ididx( argAuditClusterId,
			argAuditUserId,
			argAuditSessionId,
			secClusterId,
			secTenantId,
			delgrpincsTenantId,
			delgrpincsTSecGrpIncId );
	end loop;
	close cur_delgrpincs;
	set done = false;
	open cur_deltsecgroups;
	read_loop_deltsecgroups: loop
		fetch cur_deltsecgroups into
			deltsecgroupsTenantId,
			deltsecgroupsTSecGroupId;
		if done then
			leave read_loop_deltsecgroups;
		end if;
		call cfinet213.sp_delete_tsecgrp_by_ididx( argAuditClusterId,
			argAuditUserId,
			argAuditSessionId,
			secClusterId,
			secTenantId,
			deltsecgroupsTenantId,
			deltsecgroupsTSecGroupId );
	end loop;
	close cur_deltsecgroups;
	delete from cfinet213.tenant
	where
		id = argId;
	select row_count()
	into RowsAffected;

	if RowsAffected != 1 and RowsAffected != 0
	then
		signal sqlstate '45000'
		set message_text = 'sp_delete_tenant() Expected to affect 1 tenant',
			schema_name = 'cfinet213',
			table_name = 'tenant';
	end if;

end;////
